#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ callback_data –∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
"""

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö callback_data, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
CALLBACK_DATA_MAP = {
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    'back_to_main': '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    'menu_accounts': '–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤', 
    'menu_tasks': '–ú–µ–Ω—é –∑–∞–¥–∞—á',
    'menu_proxy': '–ú–µ–Ω—é –ø—Ä–æ–∫—Å–∏',
    'menu_help': '–ú–µ–Ω—é –ø–æ–º–æ—â–∏',
    
    # –ê–∫–∫–∞—É–Ω—Ç—ã
    'add_account': '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
    'list_accounts': '–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
    'bulk_add_accounts': '–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
    'upload_accounts': '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
    'profile_setup': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è',
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω—ã)
    'account_details_*': '–î–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞',
    'profile_setup_*': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞',
    'publish_to_*': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
    'change_password_*': '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è',
    'assign_proxy_*': '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏',
    'delete_account_*': '–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
    'confirm_delete_*': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
    
    # –ó–∞–¥–∞—á–∏
    'publish_now': '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å',
    'schedule_publish': '–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
    'publication_stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
    
    # –ü—Ä–æ–∫—Å–∏  
    'add_proxy': '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
    'list_proxies': '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏',
    'distribute_proxies': '–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
}

def test_callback_data_coverage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö callback_data –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º keyboards.py
    try:
        from telegram_bot.keyboards import (
            get_accounts_menu_keyboard,
            get_tasks_menu_keyboard, 
            get_proxy_menu_keyboard,
            get_accounts_list_keyboard,
            get_account_actions_keyboard,
            get_publish_type_keyboard
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç keyboards.py —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ keyboards.py: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º bot.py
    try:
        from telegram_bot.bot import callback_handler
        print("‚úÖ –ò–º–ø–æ—Ä—Ç callback_handler —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ callback_handler: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º handlers/
    try:
        from telegram_bot.handlers import get_all_handlers
        print("‚úÖ –ò–º–ø–æ—Ä—Ç handlers/ —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers/: {e}")
        return False
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ callback_data –≤ keyboards.py:")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class FakeAccount:
        def __init__(self, account_id, username, is_active=True):
            self.id = account_id
            self.username = username
            self.is_active = is_active
    
    fake_accounts = [
        FakeAccount(1, "test_account_1"),
        FakeAccount(2, "test_account_2", False)
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboards_to_test = [
        ("get_accounts_menu_keyboard", get_accounts_menu_keyboard, []),
        ("get_tasks_menu_keyboard", get_tasks_menu_keyboard, []),
        ("get_proxy_menu_keyboard", get_proxy_menu_keyboard, []),
        ("get_accounts_list_keyboard", get_accounts_list_keyboard, [fake_accounts]),
        ("get_account_actions_keyboard", get_account_actions_keyboard, [1]),
        ("get_publish_type_keyboard", get_publish_type_keyboard, [])
    ]
    
    all_callback_data = set()
    
    for name, func, args in keyboards_to_test:
        try:
            keyboard = func(*args)
            for row in keyboard.inline_keyboard:
                for button in row:
                    all_callback_data.add(button.callback_data)
            print(f"  ‚úÖ {name}")
        except Exception as e:
            print(f"  ‚ùå {name}: {e}")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(all_callback_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callback_data:")
    for callback in sorted(all_callback_data):
        print(f"  ‚Ä¢ {callback}")
    
    print("\nüîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥':")
    critical_back_buttons = [
        'back_to_main',
        'menu_accounts', 
        'menu_tasks',
        'menu_proxy'
    ]
    
    for callback in critical_back_buttons:
        if callback in all_callback_data:
            print(f"  ‚úÖ {callback}")
        else:
            print(f"  ‚ùå {callback} - –ù–ï –ù–ê–ô–î–ï–ù!")
    
    print("\n" + "=" * 50)
    print("üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
    
    return True

if __name__ == "__main__":
    test_callback_data_coverage() 