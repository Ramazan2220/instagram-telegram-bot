#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π profile_setup
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_manager import init_db, get_instagram_accounts
from instagram.client import get_instagram_client

def load_working_accounts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    import glob
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    working_files = glob.glob("working_accounts_*.txt")
    if working_files:
        latest_file = max(working_files)
        try:
            working_ids = []
            with open(latest_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        account_id = line.split(':')[0]
                        if account_id.isdigit():
                            working_ids.append(int(account_id))
            return working_ids
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    return []

def get_test_account():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ)"""
    init_db()
    accounts = get_instagram_accounts()
    
    if not accounts:
        print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        print("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
        return None
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    working_ids = load_working_accounts()
    
    if working_ids:
        print(f"\nüîç –ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(working_ids)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        working_accounts = [acc for acc in accounts if acc.id in working_ids]
        
        if working_accounts:
            print("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –†–ê–ë–û–ß–ò–ï –∞–∫–∫–∞—É–Ω—Ç—ã:")
            accounts = working_accounts
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if len(accounts) == 1:
                selected_account = accounts[0]
                print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {selected_account.username}")
                return selected_account
        else:
            print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python test_accounts_validation.py")
        
        proceed = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏? (y/n): ").lower()
        if proceed != 'y':
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã.")
            return None
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
    for i, account in enumerate(accounts, 1):
        status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω" if account.id in working_ids else ("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if account.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
        print(f"{i}. {account.username} - {status}")
    
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(accounts)}): ")
            account_index = int(choice) - 1
            if 0 <= account_index < len(accounts):
                selected_account = accounts[account_index]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {selected_account.username}")
                return selected_account
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        except KeyboardInterrupt:
            print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return None

def test_instagram_connection(account):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Instagram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print(f"\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram –¥–ª—è {account.username}...")
    
    try:
        client = get_instagram_client(account.id)
        if client:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Instagram —É—Å–ø–µ—à–Ω–æ!")
            return client
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Instagram.")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def format_result(success, message, operation):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if success:
        print(f"‚úÖ {operation}: {message}")
    else:
        print(f"‚ùå {operation}: {message}")
    return success

if __name__ == "__main__":
    print("üß™ –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è profile_setup")
    account = get_test_account()
    if account:
        client = test_instagram_connection(account)
        if client:
            print(f"üéØ –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {account.username}")
        else:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram.") 