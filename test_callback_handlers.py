#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback handlers –≤ Telegram –±–æ—Ç–µ
"""

import sys
import logging
import sys
sys.path.append('.')
from telegram_bot import handlers
from telegram_bot.keyboards import get_accounts_menu_keyboard, get_main_menu_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_keyboard_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        main_keyboard = get_main_menu_keyboard()
        accounts_keyboard = get_accounts_menu_keyboard()
        
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä —É—Å–ø–µ—à–µ–Ω")
        logger.info(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {type(main_keyboard)}")
        logger.info(f"‚úÖ –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {type(accounts_keyboard)}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

def test_callback_handler_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ callback_handler"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        callback_handler = getattr(handlers, 'callback_handler', None)
        assert callable(callback_handler), "callback_handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π"
        
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç callback_handler —É—Å–ø–µ—à–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ callback_handler: {e}")
        return False

def test_states_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    try:
        from telegram_bot.states import (
            WAITING_ACCOUNT_INFO, WAITING_ACCOUNTS_FILE,
            WAITING_COOKIES_INFO, WAITING_NEW_PASSWORD
        )
        
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Å–ø–µ—à–µ–Ω")
        logger.info(f"‚úÖ WAITING_ACCOUNT_INFO: {WAITING_ACCOUNT_INFO}")
        logger.info(f"‚úÖ WAITING_ACCOUNTS_FILE: {WAITING_ACCOUNTS_FILE}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False

def test_db_functions_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database.db_manager import (
            get_instagram_accounts, delete_instagram_account,
            get_proxies, assign_proxy_to_account
        )
        
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ë–î —É—Å–ø–µ—à–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ callback handlers...")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä", test_keyboard_imports),
        ("–ò–º–ø–æ—Ä—Ç callback_handler", test_callback_handler_import),
        ("–ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π", test_states_import),
        ("–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ë–î", test_db_functions_import),
    ]
    
    failed_tests = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                logger.info(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
                failed_tests.append(test_name)
        except Exception as e:
            logger.error(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
            failed_tests.append(test_name)
    
    # –ò—Ç–æ–≥–∏
    logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(tests) - len(failed_tests)}/{len(tests)}")
    
    if failed_tests:
        logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(failed_tests)}/{len(tests)}")
        logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã: {failed_tests}")
        return False
    else:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 